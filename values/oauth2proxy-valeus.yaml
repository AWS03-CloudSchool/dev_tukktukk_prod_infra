config:
  # Add config annotations
  annotations: {}
  # OAuth client ID
  clientID: "argocd"
  # OAuth client secret
  clientSecret: "TARtKEfwIwk4ZsDNNl5vn6LADV4E3mRc"
  # Create a new secret with the following command
  # openssl rand -base64 32 | head -c 32 | base64
  # Use an existing secret for OAuth2 credentials (see secret.yaml for required fields)
  # Example:
  # existingSecret: secret
  cookieSecret: "ZzBkN000Wm0pQkVkKUhzMk5YPntQRUw_ME1oMTZZTy0"
  # The name of the cookie that oauth2-proxy will create
  # If left empty, it will default to the release name
  cookieName: ""

  # Default configuration, to be overridden
  configFile: |-
    redirect_url = "https://argocd.tukktukk.com/oauth2/callback"
    oidc_issuer_url = "https://keycloak.tukktukk.com/realms/Test"
    code_challenge_method = "S256"

ingress:
  enabled: true
  className: nginx
  path: /oauth2
  # Only used if API capabilities (networking.k8s.io/v1) allow it
  pathType: ImplementationSpecific
  # Used to create an Ingress record.
  hosts:
    - argocd.tukktukk.com
  # Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
  # Warning! The configuration is dependant on your current k8s API version capabilities (networking.k8s.io/v1)
  # labels: {}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    # kubernetes.io/tls-acme: "true"
  # tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

resources: 
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 150m
    memory: 128Mi

# Enables and configure the automatic deployment of the redis subchart
redis:
  # provision an instance of the redis sub-chart
  enabled: false
  # # Redis specific helm chart settings, please see:
  # # https://github.com/bitnami/charts/tree/master/bitnami/redis#parameters
  # redisPort: 6379
  # cluster:
  #   enabled: false
  #   slaveCount: 1